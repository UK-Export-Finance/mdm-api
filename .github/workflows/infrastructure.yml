# This GHA is responsible for `APIM` supporting infrastructure
# creation and configuration using `az cli` bash scripting.
#
# Standard Azure naming convention has been followed:
# https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming
# A minor modification to standard naming convention has been made to not include region.
#
#
# Following Azure services are consumed:
# 1. Azure resource group - https://learn.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest#az-group-create
# 2. Azure container registry - https://learn.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest#az-acr-create
# 3. Azure virtual network - https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview
# 4. Azure virtual network peer - https://learn.microsoft.com/en-us/cli/azure/network/vnet/peering?view=azure-cli-latest
# 5. Azure container app environment - https://learn.microsoft.com/en-us/azure/container-apps/environment
# 6. Azure container app - https://learn.microsoft.com/en-us/azure/container-apps/containers
# 
#
# Execution
# *********
# GHA is only invoked when following conditions are satisfied:
# 1. Push to the `infrastructure` branch only.
# 2. Exact file path matches `.github/workflows/infrastructure.yml`.
#
# TO-DO
# *****
# 0. Add --internal-only true \ to CAE
# 1. Add delete locks
# 2. Add log workspace
# 3. Add Insight
# 4. Add monitor
# 5. Add API management service
# 6. Add Key vault
# 7. Add VNET peer (x-subscription RBAC SP)

name: Infrastructure üî®
run-name: APIM base infrastructure build from ${{ github.repository }}

on:
  push:
    branches: [ infrastructure ]
    paths: [ .github/workflows/infrastructure.yml ]

env:
  product: apim
  environment: infrastructure
  timezone: 'Europe/London'
  # Deployment environment target i.e., `dev`, `staging`, `prod` 
  target: ${{ vars.environment }}

jobs:

# 1. Setup infrastructure variables
  setup:
    name: Setup üîß
    runs-on: [ self-hosted, APIM, infrastructure ]
    outputs:
      environment: ${{ env.environment }}
      timezone: ${{ env.timezone }}
    steps:
    - name: Environment üß™
      run: echo "Environment set to ${{ env.environment }}"

    - name: Timezone üåê
      run: echo "Timezone set to ${{ env.timezone }}"

# 2. Base infrastructure creation
  base:
    name: Base üß±
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: [ self-hosted, APIM, infrastructure ]
    steps:

    - name: Pre-production üí´
      if: contains('["dev", "staging"]', env.target)
      run: echo "type=Preproduction" >> $GITHUB_ENV

    - name: Production üí´
      if: ${{ 'prod' == env.target }}
      run: echo "type=Production" >> $GITHUB_ENV

    - name: Tags üè∑Ô∏è
      run: echo tags='Environment=${{ env.type }}' \
        'Product=${{ env.product }}' \
        'Team=development' >> $GITHUB_ENV

    - name: Login üîê
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure defaults ‚ú®
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          # Basic
          az configure --defaults location=${{ vars.REGION }}
          az configure --defaults group=rg-${{ env.product }}-${{ env.target }}-001

          # AZ CLI extensions upgrade
          az extension add --name containerapp --upgrade

    - name: Resource group üèóÔ∏è
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az group create \
          --name rg-${{ env.product }}-${{ env.target }}-001 \
          --tags ${{ env.tags }}

    
    - name: Container registry üì¶Ô∏è
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az acr create \
          --name cr${{ env.product }}${{ env.target }}001 \
          --sku Standard \
          --admin-enabled true \
          --tags ${{ env.tags }}

    - name: Virtual network üßµ
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az network vnet create \
          --name vnet-${{ env.product }}-001 \
          --address-prefix ${{ secrets.VNET_ADDRESS_PREFIX }} \
          --subnet-name snet-${{ env.product }}-001 \
          --subnet-prefixes ${{ secrets.VNET_SUBNET_PREFIX }} \
          --tags ${{ env.tags }}
    
    # TODO: APIM-168
    # - name: VNET peer üîÄ
    #   uses: Azure/cli@1.0.4
    #   with:
    #     inlineScript: |
    #       az network vnet peering create \
    #       --name vnet-peer-${{ env.product }}-001 \
    #       --vnet-name vnet-${{ env.product }}-001 \
    #       --remote-vnet $(az network vnet show --subscription ${{ secrets.REMOTE_VNET_SUBSCRIPTION }} --resource-group ${{ secrets.VNET_REMOTE_RESOURCE_GROUP }} --name ${{ secrets.REMOTE_VNET }} --query 'id' -o tsv) \
    #       --allow-forwarded-traffic 1 \
    #       --allow-vnet-access 1

    - name: Container app environment üóÉÔ∏è
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az containerapp env create \
          --name cae-${{ env.product }}-${{ env.target }}-001 \
          --infrastructure-subnet-resource-id $(az network vnet subnet show --name snet-${{ env.product }}-001 --vnet-name vnet-${{ env.product }}-001 --query 'id' -o tsv) \
          --tags ${{ env.tags }}

    
    - name: Container app - MDM üìÑ
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az containerapp create \
          --name ca-${{ env.product }}-mdm-${{ env.target }}-001 \
          --environment cae-${{ env.product }}-${{ env.target }}-001 \
          --registry-server cr${{ env.product }}${{ env.target }}001.azurecr.io \
          --registry-username $(az acr credential show -n cr${{ env.product }}${{ env.target }}001 --query username | tr -d '"') \
          --cpu 1.0 \
          --memory 2.0Gi \
          --min-replicas 1 \
          --max-replicas 4 \
          --ingress internal \
          --target-port ${{ vars.MDM_PORT }} \
          --revisions-mode multiple \
          --transport http2 \
          --tags ${{ env.tags }}
