# This GHA is responsible for APIM deployment.
# Deployment is initiated using `az cli` bash script.
#
# Standard Azure naming convention has been followed:
# https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming
#
#
# Following Azure services are consumed:
# 1. Azure resource group - https://learn.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest#az-group-create
# 2. Azure container registry - https://learn.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest#az-acr-create
# 3. Azure container app environment - https://learn.microsoft.com/en-us/azure/container-apps/environment
# 4. Azure container app - https://learn.microsoft.com/en-us/azure/container-apps/containers
# 
#
# Execution
# *********
# GHA is only invoked when following conditions are satisfied:
# 1. Push to the `dev`, `staging` and `production` branches only.
# 2. Any modifications inside `src` directory

name: Deployment üöÄ
run-name: APIM deployment for ${{ github.repository }}

on:
  push:
    branches:
     - deployment

    paths:
    - 'src/**'
    - 'package.json'
    - 'package-lock.json'
    - 'Dockerfile'
    - 'tsconfig.json'
    - 'tsconfig.build.json'
    - '.github/workflows/deployment.yml'

env:
  PRODUCT: apim
  ENVIRONMENT: dev
  TIMEZONE: 'Europe/London'
  # Base artifact
  FROM: latest

jobs:

# 1. Setup deployment variables
  setup:
    name: Setup üîß
    runs-on: [ self-hosted, APIM, deployment ]
    outputs:
      product: ${{ env.PRODUCT }}
      environment: ${{ env.ENVIRONMENT }}
      timezone: ${{ env.TIMEZONE }}
    steps:
    - name: Environment üß™
      run: echo "Environment set to ${{ env.ENVIRONMENT }}"

    - name: Timezone üåê
      run: echo "Timezone set to ${{ env.TIMEZONE }}"

# 2. MDM micro-service deployment
  mdm:
    name: MDM üì¶Ô∏è
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    env:
      NAME: mdm
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    runs-on: [ self-hosted, APIM, deployment ]
    steps:

    - name: Repository üóÉÔ∏è
      uses: actions/checkout@v3

    - name: Azure üîê
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: CLI üìù
      run: |
        echo ACR=$(az acr show -n $(az resource list --resource-type 'Microsoft.ContainerRegistry/registries' --query '[0].name' -o tsv) --query loginServer -o tsv) >> $GITHUB_ENV
        echo ACR_USER=$(az acr show -n $(az resource list --resource-type 'Microsoft.ContainerRegistry/registries' --query '[0].name' -o tsv) --query name -o tsv) >> $GITHUB_ENV
        echo CA_NAME=$(az resource list --resource-type 'Microsoft.App/containerApps' --query '[?contains(name, `${{ env.NAME }}`)].name' -o tsv) >> $GITHUB_ENV

    - name: Defaults ‚ú®
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          # Basic
          az configure --defaults location=${{ vars.REGION }}
          az configure --defaults group=rg-${{ env.PRODUCT }}-${{ vars.TARGET }}-${{ vars.VERSION }}

    - name: ACR üîê
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR }}
        username: ${{ env.ACR_USER }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Artifacts üóÉÔ∏è
      run: |
        docker build . \
        -t ${{ env.ACR }}/${{ env.NAME }}:${{ github.sha }} \
        -t ${{ env.ACR }}/${{ env.NAME }}:${{ env.FROM }}
        docker push ${{ env.ACR }}/${{ env.NAME }}:${{ github.sha }}
        docker push ${{ env.ACR }}/${{ env.NAME }}:${{ env.FROM }}

    - name: Revisions üîÄ
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az containerapp update \
          --container-name ${{ env.CA_NAME }} \
          --image ${{ env.ACR }}/${{ env.NAME }}:${{ env.FROM }} \
          --revision-suffix v${{ github.run_id }} \
          --set-env-vars \
          "PORT=${{ secrets.PORT }}" \
          "NODE_ENV=${{ secrets.NODE_ENV }}" \
          "TZ=${{ secrets.TZ }}" \
          "SWAGGER_USER=${{ secrets.SWAGGER_USER }}" \
          "SWAGGER_PASSWORD=${{ secrets.SWAGGER_PASSWORD }}" \
          "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" \
          "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" \
          "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" \
          "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" \
          "DATABASE_MDM_NAME=${{ secrets.DATABASE_MDM_NAME }}" \
          "DATABASE_NUMBER_GENERATOR_NAME=${{ secrets.DATABASE_NUMBER_GENERATOR_NAME }}" \
          "DATABASE_CEDAR_NAME=${{ secrets.DATABASE_CEDAR_NAME }}" \
          "DATABASE_CIS_NAME=${{ secrets.DATABASE_CIS_NAME }}" \
          "API_KEY=${{ secrets.API_KEY }}" \
          "API_KEY_STRATEGY=${{ secrets.API_KEY_STRATEGY }}"
